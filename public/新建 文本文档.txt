1.1
import pandas as pd

def extract_df_columns(df: pd.DataFrame, col_list: list):
    return df[col_list].copy()

1.2
import pandas as pd

def rename_df_columns(df: pd.DataFrame, col_dict: dict):
    return df.rename(columns=col_dict)

2
import pandas as pd

def groupby_df(df: pd.DataFrame, col_list: list, agg_func: str):
    # 使用指定的聚合函数对数据进行分组并聚合
    grouped_df = df.groupby(col_list).agg(agg_func).reset_index()
    # 重置索引
    grouped_df.reset_index(drop=True, inplace=True)
    return grouped_df

3
import pandas as pd

def prepare_airport_traffic_data(flights_data: pd.DataFrame):
    # 按月和出发机场分组，并统计航班数量
    outgoing_traffic = flights_data.groupby(['month', 'origin']).size().reset_index(name='incoming_flights')
    return outgoing_traffic



4
import pandas as pd

# 假设 latlon_to_mercator 已经定义好
def latlon_to_mercator(lat, lon):
    import numpy as np
    k = 6378137
    x = np.radians(lon) * k
    y = np.log(np.tan(np.pi / 4 + np.radians(lat) / 2)) * k
    return x, y

def add_mercator_coordinates(flights_sample, airports_df):
    # 合并起点坐标
    flights_sample = flights_sample.merge(airports_df[['faa', 'lat', 'lon']], 
                                          left_on='origin', right_on='faa', how='inner')
    flights_sample.rename(columns={'lat': 'lat_origin', 'lon': 'lon_origin'}, inplace=True)
    flights_sample.drop(columns=['faa'], inplace=True)
    
    # 合并目的地坐标
    flights_sample = flights_sample.merge(airports_df[['faa', 'lat', 'lon']], 
                                          left_on='dest', right_on='faa', how='inner')
    flights_sample.rename(columns={'lat': 'lat_dest', 'lon': 'lon_dest'}, inplace=True)
    flights_sample.drop(columns=['faa'], inplace=True)
    
    # 转换起点墨卡托坐标
    flights_sample['x1'], flights_sample['y1'] = latlon_to_mercator(flights_sample['lat_origin'], flights_sample['lon_origin'])
    
    # 转换目的地墨卡托坐标
    flights_sample['x2'], flights_sample['y2'] = latlon_to_mercator(flights_sample['lat_dest'], flights_sample['lon_dest'])
    
    return flights_sample
5.1
import pandas as pd
import sqlite3

def query_top_airlines(conn):
    query = '''
    SELECT airlines.name AS name, COUNT(flights.flight) AS flight_count
    FROM flights
    JOIN airlines ON flights.carrier = airlines.carrier
    GROUP BY airlines.name
    ORDER BY flight_count DESC
    LIMIT 10;
    '''
    return pd.read_sql_query(query, conn)

5.2
import pandas as pd
import sqlite3

def query_airline_delays(conn):
    query = '''
    SELECT airlines.name AS name, AVG(flights.arr_delay) AS avg_arrival_delay
    FROM flights
    JOIN airlines ON flights.carrier = airlines.carrier
    GROUP BY airlines.name
    ORDER BY avg_arrival_delay DESC
    LIMIT 10;
    '''
    return pd.read_sql_query(query, conn)
6
import numpy as np
import pandas as pd

def build_adjacency_matrix(flights_df):
    # 1. 获取唯一机场代码
    airports = pd.concat([flights_df['origin'], flights_df['dest']]).unique()
    
    # 2. 创建映射字典
    airport_to_idx = {airport: idx for idx, airport in enumerate(airports)}
    idx_to_airport = {idx: airport for airport, idx in airport_to_idx.items()}
    
    # 3. 初始化邻接矩阵
    n = len(airports)
    adjacency_matrix = np.zeros((n, n), dtype=int)
    
    # 4. 填充邻接矩阵
    for _, row in flights_df.iterrows():
        origin_index = airport_to_idx[row['origin']]
        dest_index = airport_to_idx[row['dest']]
        adjacency_matrix[origin_index, dest_index] += 1
    
    return adjacency_matrix
7.1
import numpy as np

def pagerank(adj_matrix, d=0.85, max_iter=100, tol=1e-6):
    n = adj_matrix.shape[0]  # 获取节点数量（机场数量）
    
    # 计算出度并标准化邻接矩阵
    out_degree = adj_matrix.sum(axis=1)
    stochastic_matrix = adj_matrix / out_degree[:, None]
    stochastic_matrix[np.isnan(stochastic_matrix)] = 1.0 / n  # 处理出度为0的行
    
    # 初始化 PageRank 向量
    pr = np.ones(n) / n
    
    # 迭代 PageRank 直到收敛
    for _ in range(max_iter):
        pr_new = (1 - d) / n + d * (stochastic_matrix.T @ pr)  # 使用转置的 stochastic_matrix
        if np.linalg.norm(pr_new - pr, 1) < tol:
            break
        pr = pr_new
    
    return pr
7.2
import pandas as pd

def top_airports_by_rank(airports_df, pr_scores):
    # 将 PageRank 分数与机场代码（faa）关联起来
    airports_df = airports_df.copy()
    airports_df['score'] = pr_scores
    
    # 按 PageRank 分数降序排序，并取前 10 名
    top_10_airports = airports_df[['faa', 'name', 'score']].sort_values(by='score', ascending=False).head(10)
    
    return top_10_airports.reset_index(drop=True)